// Declarative Jenkins pipeline to build a realtime kernel for mahalia
pipeline {

  // This build needs a Jenkins agent that can cross-compile a linux kernel.
  // Target of cross-compilation is armv7.  Refine labels when needed.
  agent {label "kernel && cross"}

  stages {
    stage("compile and package") {
      steps {
        // The following build steps automate Chris' instructions from
        // https://github.com/mahalia-dependencies/mahalia-utils/blob/master/compile_kernel/instructions.md

        // Remove any leftovers from previous builds
        sh "make distclean"

        // Build default configuration for beaglebone kernel with realtime patch
        sh "ti_config_fragments/defconfig_builder.sh -t ti_sdk_am3x_rt_release"
        sh "ARCH=arm make ti_sdk_am3x_rt_release_defconfig"

        // We cannot manually execute make menuconfig in Jenkins. Instead, we
        // store the resulting configuration file here in git and copy it to
        // ".config"
        sh "cp mahalia/kernel.config .config"

        // Compile the kernel for ARM
        sh("ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- " +
           "make -j5 zImage modules dtbs"                  )

        // Remove any leftovers from previous builds in modules output directory
        sh "rm -rf compiled_modules && mkdir compiled_modules"

        // Create and populate modules output directory
        sh "ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=compiled_modules make modules_install"

        // End of steps from Chris' instructions. We package using mhamakedeb:

        // Pack compiled kernel and modules into debian package
        sh('mhamakedeb mahalia/mahalia-kernel.csv $(make kernelversion).mha.' +
           '$(cat mahalia/version) armhf')

        // Store debian package in stash for next Jenkinsfile stage below
        stash name: "deb", includes: '*.deb'

        // Additionally, publish debian package as Jenkins artifact.
        archiveArtifacts "*.deb"
      }
    }

    stage("store debian package for apt apt") {
      // This stage stores the new debian package in our storage from which
      // the apt repository is generated.  It needs to be executed in container
      // "aptly" to ensure (1) proper synchronization (maximum 1 "aptly"
      // instance allowed at any time) and (2) access to the storage disk.
      agent {label "aptly"}
      steps {
        // receive deb packages from previous "compile and package" stage
        unstash "deb"

        // Create a directory where the deb will be found by storage.mk
        sh "mkdir deb"

        // We will use the same kernel regardless of ubuntu/debian release
        sh "mkdir deb/bionic && ln *.deb deb/bionic/"
        sh "mkdir deb/buster && ln *.deb deb/buster/"
        sh "mkdir deb/focal  && ln *.deb deb/focal/"

        // Copies the new debs to the stash of existing debs
        sh "make -f mahalia/storage.mk storage"

        // Trigger update of the apt repository in Jenkins job "hoertech-aptly"
        build job:         "/hoertech-aptly/master",
              quietPeriod: 300,
              wait:        false
      }
    }
  }

  // Email notification on failed build taken from
  // https://jenkins.io/doc/pipeline/tour/post/
  // multiple recipients are comma-separated:
  // https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#-mail-%20mail
  post {
    failure {
      mail to: 't.herzke@hoertech.de,m.zimmermann@hoertech.de,p.maanen@hoertech.de',
           subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
           body: "Something is wrong with ${env.BUILD_URL}"
    }
  }
}
